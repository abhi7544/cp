
#include<stdio.h>
void bestFit(int blockSize[], int m, int processSize[], int n) 
{ 
    // Stores block id of the block allocated to a 
    // process 
    int allocation[n];
    for(int i=0;i<n;i++)
    allocation[i]=-1;
    
  
    // Initially no block is assigned to any process 

  
    // pick each process and find suitable blocks 
    // according to its size ad assign to it 
    for (int i=0; i<n; i++) 
    { 
        // Find the best fit block for current process 
        int bestIdx = -1; 
        for (int j=0; j<m; j++) 
        { 
            if (blockSize[j] >= processSize[i]) 
            { 
                if (bestIdx == -1) 
                    bestIdx = j; 
                else if (blockSize[bestIdx] > blockSize[j]) 
                    bestIdx = j; 
            } 
        } 
  
        // If we could find a block for current process 
        if (bestIdx != -1) 
        { 
            // allocate block j to p[i] process 
            allocation[i] = bestIdx; 
  
            // Reduce available memory in this block. 
            blockSize[bestIdx] -= processSize[i]; 
        } 
    } 
  
    printf( "\nProcess No.\tProcess Size\tBlock no.\n"); 
    for (int i = 0; i < n; i++) 
    { 
        printf("%d \t\t %d",i+1,processSize[i]);
        if (allocation[i] != -1) 
            printf("%d",allocation[i] + 1);
        else
            printf("Not Allocated\n"); 
            printf("\n");
    } 
} 
  
// Driver code 
int main() 
{ 
    int blockSize[20]; 
    int processSize[20]; 
    int m,i;
    int n;
    printf("Enter Number of process ");
    scanf("%d",&n);
    printf("Enter Number of blocks ");
    scanf("%d",&m);

printf("Process size: ");

    for(i=0;i<n;i++)
scanf("%d",&processSize[i]);
printf("Block size: ");

     for(i=0;i<m;i++)
    scanf("%d",&blockSize[i]);
  
    bestFit(blockSize, m, processSize, n); 
  
    return 0 ; 
} 